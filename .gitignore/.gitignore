from Tkinter import *
from random import shuffle

tk = Tk()
tk.geometry('500x300')
tk.focus_set()

letters = list('school')
letters_original = list(letters)
shuffle(letters)

letters_pos = {'pos': -1, 'new_pos': -1} 
pos = -1
newpos = pos
caps = False

def check():
    global pos
    global newpos
    global letters_pos
    global letters
    pointer = ''
    for i in range(min(letters_pos.values()), max(letters_pos.values())) + [max(letters_pos.values())]:
        if letters[i].lower() == letters_original[i]:
            pointer = pointer + '*'
    if all(letters_original[i] == j for i,j in enumerate(letters)):
        pointer = '!'
    canvas.itemconfigure(text2, text=pointer)   
        
def rotate(event):
    new_list = []
    old_list_left = []
    old_list_right = []
    global letters
    
    if min(letters_pos.values()) > 0:
        for i in range(min(letters_pos.values())):
            old_list_left.append(letters[i])

    for i in range(min(letters_pos.values()), max(letters_pos.values())) + [max(letters_pos.values())]:
        new_list.append(letters[i])        

    if max(letters_pos.values()) < len(letters)-1:
        for i in range(max(letters_pos.values())+1, len(letters)):
            old_list_right.append(letters[i])

    new_list.insert(0, new_list.pop())
    letters = old_list_left + new_list + old_list_right
    canvas.itemconfigure(text1, text=letters)
    check()
 
def clear(event):
    global letters_pos 
    global pos
    global caps
    for i in range(0, len(letters)):
            letters[i] = letters[i].lower()
    canvas.itemconfigure(text1, text=letters)
    
    letters_pos['pos'] = -1
    letters_pos['new_pos'] = letters_pos['pos']
    caps = False
    #print pos, newpos
    check()

def move(event):
    global pos
    global newpos
    global letters_pos
    global caps
    global letters

    if caps == True:

        for i in range(min(letters_pos.values()), max(letters_pos.values())) + [max(letters_pos.values())]:
            letters[i] = letters[i].lower()  

        if event.keysym == 'Right':
            if letters_pos['new_pos'] <= letters_pos['pos']:
                letters_pos['pos'] = letters_pos['pos'] + 1
            else:
                letters_pos['pos'] = letters_pos['new_pos'] + 1
            if max(letters_pos.values()) > len(letters)-1:
                letters_pos[max(letters_pos, key=lambda j: letters_pos[j])] = len(letters) - 1

        if event.keysym == 'Left':
            if letters_pos['pos'] <= letters_pos['new_pos']:
                letters_pos['pos'] = letters_pos['pos'] - 1
            else:
                letters_pos['pos'] = letters_pos['new_pos'] - 1
            if min(letters_pos.values()) < 0:
                letters_pos[min(letters_pos, key=lambda j: letters_pos[j])] = 0

        letters_pos['new_pos'] = letters_pos['pos'] 
        
        letters[letters_pos['pos']] = letters[letters_pos['pos']].upper()
        canvas.itemconfigure(text1, text=letters)

    if caps == False:

        letters_pos['old_pos'] = letters_pos['pos']

        if event.keysym == 'Right':
            letters_pos['pos'] = letters_pos['pos'] + 1
            if letters_pos['pos'] > len(letters)-1:
                letters_pos['pos'] = 0

        if event.keysym == 'Left':
            letters_pos['pos'] = letters_pos['pos'] - 1
            if letters_pos['pos'] < 0:
                letters_pos['pos'] = len(letters)-1
            
    
        letters[letters_pos['old_pos']] = letters[letters_pos['old_pos']].lower() 
        del letters_pos['old_pos'] 
        letters[letters_pos['pos']] = letters[letters_pos['pos']].upper()
        canvas.itemconfigure(text1, text=letters)
        letters_pos['new_pos'] = letters_pos['pos']
        
    caps = False
    #print letters_pos
    check()

def capitalize(event):
    global pos 
    global newpos
    global caps
    global letters
    global letters_pos
    tk.bind('<Return>', rotate)

    caps = True

    if event.keysym == 'Left':

        if letters_pos['pos'] == -1:
            letters_pos['pos'] = len(letters) - 1
            letters_pos['new_pos'] = letters_pos['pos']
            letters[letters_pos['pos']] = letters[letters_pos['pos']].upper()
            canvas.itemconfigure(text1, text=letters)
        elif letters_pos['new_pos'] == letters_pos['pos']:
            letters_pos['new_pos'] = letters_pos['pos'] - 1
        elif letters_pos['new_pos'] != letters_pos['pos']:
            if letters[letters_pos['new_pos']].isupper():
                letters[letters_pos['new_pos']] = letters[letters_pos['new_pos']].lower()
            letters_pos['new_pos'] = letters_pos['new_pos'] - 1

        if letters_pos['new_pos'] < 0:
            letters_pos['new_pos'] = 0
        

    if event.keysym == 'Right':
        
        if letters_pos['pos'] == -1:
            letters_pos['pos'] = 0
            letters_pos['new_pos'] = letters_pos['pos']
            letters[letters_pos['pos']] = letters[letters_pos['pos']].upper()
        elif letters_pos['new_pos'] == letters_pos['pos']:
            letters_pos['new_pos'] = letters_pos['pos'] + 1
        elif letters_pos['new_pos'] != letters_pos['pos']:
            if letters[letters_pos['new_pos']].isupper():
                letters[letters_pos['new_pos']] = letters[letters_pos['new_pos']].lower()
            letters_pos['new_pos'] = letters_pos['new_pos'] + 1
        
        if letters_pos['new_pos'] > len(letters)-1:
            letters_pos['new_pos'] = len(letters)-1

    for i in range(min(letters_pos.values()), max(letters_pos.values())) + [max(letters_pos.values())]:
        letters[i] = letters[i].upper()
                                                                         

    '''if letters_pos['new_pos'] < letters_pos['pos']:
        for i in range(letters_pos['new_pos'], letters_pos['pos']+1):
            letters[i] = letters[i].upper()
    elif letters_pos['pos'] < letters_pos['new_pos']:
        for i in range(letters_pos['pos'], letters_pos['new_pos']+1): 
            letters[i] = letters[i].upper()'''

    canvas.itemconfigure(text1, text=letters)
    print letters_pos
    check()

canvas = Canvas(tk)
canvas.pack(expand=YES, fill=BOTH)
text1 = canvas.create_text(250, 150, text=letters, font=('helvetica', 32))
text2 = canvas.create_text(250, 50, font=('helvetica', 32))


tk.bind('<Left>', move)
tk.bind('<Right>', move)
tk.bind('<Shift-Left>', capitalize)
tk.bind('<Shift-Right>', capitalize)
tk.bind('<Escape>', clear)
#tk.bind('<Return>', scroll)


tk.mainloop()
'''
n = 0

def move1(event=None):
    global n
    if event.keysym == 'Left':
        lists[n%2].append(lists[n%2].pop(0))
    if event.keysym == 'Right':
        lists[n%2].insert(0, lists[n%2].pop())
    if event.keysym == 'Up' or event.keysym == 'Down':
         n = n + 1
     
    label1.configure(text=frame1_list[0])
    label2.configure(text=frame1_list[1])
    label3.configure(text=frame1_list[2])
    label4.configure(text=frame2_list[0])
    label5.configure(text=frame2_list[1])
    label6.configure(text=frame2_list[2])

def move2(event=None):
    if event.keysym == 'Left':
        labels_frame1.append(labels_frame1.pop(0)) 
        labels_frame1[0].configure(text=frame1_list[0].upper())

tk.bind('<Shift-Left>', move1)
tk.bind('<Shift-Right>', move1)
tk.bind('<Left>', move2)
tk.bind('<Right>', move2)
tk.bind('<Up>', move1)
tk.bind('<Down>', move1)


frame1_list = ['a', 'b', 'c']
frame2_list = ['d', 'e', 'f'] 
lists = [frame1_list, frame2_list]

frame1 = Frame(tk)
frame2 = Frame(tk)
label1 = Label(frame1, text=frame1_list[0], font=('helvetica', 16))
label2 = Label(frame1, text=frame1_list[1], font=('helvetica', 16))
label3 = Label(frame1, text=frame1_list[2], font=('helvetica', 16))
label4 = Label(frame2, text=frame2_list[0], font=('helvetica', 16))
label5 = Label(frame2, text=frame2_list[1], font=('helvetica', 16))
label6 = Label(frame2, text=frame2_list[2], font=('helvetica', 16))

frame1.pack(expand=YES, fill=Y)
frame2.pack(expand=YES, fill=Y)
label1.pack(side=LEFT, expand=YES, anchor=S)
label2.pack(side=LEFT, expand=YES, anchor=S)
label3.pack(side=LEFT, expand=YES, anchor=S)
label4.pack(side=LEFT, expand=YES, anchor=N)
label5.pack(side=LEFT, expand=YES, anchor=N)
label6.pack(side=LEFT, expand=YES, anchor=N)

labels_frame1 = [label1, label2, label3]
labels_frame2 = [label4, label5, label6]

tk.mainloop()
